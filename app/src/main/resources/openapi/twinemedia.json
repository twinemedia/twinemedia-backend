{
	"openapi": "3.0.2",
	"info": {
		"version": "2.0.0",
		"title": "TwineMedia",
		"description": "The full REST API definition for TwineMedia. Functionality relating to websocket is not included here.",
		"license": {
			"name": "GPLv3"
		}
	},
	"servers": [
		{
			"url": "http://127.0.0.1/api/v2"
		}
	],
	"paths": {
		"/auth": {
			"post": {
				"summary": "Authenticates with email and passwords and returns a new authorization token",
				"operationId": "postAuth",
				"tags": ["auth"],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"required": ["email", "password"],
								"type": "object",
								"properties": {
									"email": {
										"type": "string",
										"description": "The user's email address"
									},
									"password": {
										"type": "string",
										"description": "The user's password"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The new authorization token",
						"headers": {},
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"required": ["token"],
									"properties": {
										"token": {
											"type": "string",
											"description": "The authorization token"
										}
									}
								}
							}
						}
					},
					"default": {
						"description": "An error occurred",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiErrorRes"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"securitySchemes": {
			"jwt": {
				"type": "apiKey",
				"name": "bearer",
				"in": "header"
			}
		},
		"schemas": {
			"ApiError": {
				"type": "object",
				"description": "An error that is returned in an error response",
				"required": [
					"name",
					"message",
					"data"
				],
				"properties": {
					"name": {
						"type": "string",
						"description": "The ID-style error name, e.g. \"internal_error\". Designed to be computer-readable for programmatic error handling."
					},
					"message": {
						"type": "string",
						"description": "The human-readable error message. May be localized or subject to change, which makes it unsuitable for programmatic handling. Use \"name\" for that purpose."
					},
					"data": {
						"type": "object",
						"nullable": true,
						"description": "Any additional error data. If there is no additional data, this field will be null."
					}
				}
			},
			"ApiErrorRes": {
				"type": "object",
				"description": "An error response",
				"required": ["errors"],
				"properties": {
					"errors": {
						"type": "array",
						"description": "Any error that occurred",
						"items": {
							"$ref": "#/components/schemas/ApiError"
						},
						"minItems": 1
					}
				}
			},
			"StandardRecord": {
				"type": "object",
				"description": "Standard fields for most record types",
				"required": ["id", "createdTs", "modifiedTs"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The record ID",
						"minLength": 10,
						"maxLength": 10
					},
					"createdTs": {
						"type": "string",
						"format": "date-time",
						"description": "The record's creation timestamp"
					},
					"modifiedTs": {
						"type": "string",
						"format": "date-time",
						"description": "The record's last modified timestamp. If the record has never been modified, this field's value will match \"createdTs\"."
					}
				}
			},
			"RecordOwner": {
				"type": "object",
				"description": "A record's owner account",
				"required": ["id", "name"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The owner account's ID",
						"minLength": 10,
						"maxLength": 10
					},
					"name": {
						"type": "string",
						"description": "The owner account's name",
						"maxLength": 64
					}
				}
			},
			"RecordWithNullableOwner": {
				"type": "object",
				"description": "A record with a nullable owner field",
				"required": ["owner"],
				"properties": {
					"owner": {
						"allOf": [
							{
								"$ref": "#/components/schemas/RecordOwner"
							}
						],
						"nullable": true,
						"description": "The record's owner. Will be null if the owner's account no longer exists."
					}
				}
			},
			"RecordWithOwner": {
				"type": "object",
				"description": "A record with a owner field. This should only be used for records that will never have a null owner field.",
				"required": ["owner"],
				"properties": {
					"owner": {
						"allOf": [
							{
								"$ref": "#/components/schemas/RecordOwner"
							}
						],
						"description": "The record's owner. Will be null if the owner's account no longer exists."
					}
				}
			},
			"RecordSource": {
				"type": "object",
				"description": "A file record's source",
				"required": ["id", "name", "type"],
				"properties": {
					"id": {
						"type": "string",
						"minLength": 10,
						"maxLength": 10,
						"description": "The file source's ID"
					},
					"name": {
						"type": "string",
						"maxLength": 256,
						"description": "The file source's name"
					},
					"type": {
						"type": "string",
						"description": "The file source's type (e.g. \"local_directory\")"
					}
				}
			},
			"AccountDto": {
				"description": "An account",
				"allOf": [
					{
						"type": "object",
						"required": [
							"email",
							"name",
							"permissions",
							"isAdmin",
							"defaultSource",
							"fileCount"
						],
						"properties": {
							"email": {
								"type": "string",
								"maxLength": 64,
								"description": "The account's email address"
							},
							"name": {
								"type": "string",
								"maxLength": 64,
								"description": "The account's name"
							},
							"permissions": {
								"type": "array",
								"items": {
									"type": "string",
									"maxLength": 256
								},
								"description": "The account's permissions. If the \"isAdmin\" field is true, it overrides all permissions in this field."
							},
							"isAdmin": {
								"type": "boolean",
								"description": "Whether the account is an administrator. Administrators have all permissions. If this field is true, the \"permissions\" field is overridden."
							},
							"defaultSource": {
								"type": "object",
								"allOf": [
									{
										"$ref": "#/components/schemas/RecordSource"
									}
								],
								"nullable": true,
								"description": "The account's default source. Will be null if the account has no default source."
							},
							"fileCount": {
								"type": "integer",
								"format": "int32",
								"minimum": 0,
								"description": "The number of files the account is marked as the owner of."
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					}
				]
			},
			"ApiKey": {
				"description": "An API key record",
				"allOf": [
					{
						"type": "object",
						"required": ["name", "permissions", "jwt"],
						"properties": {
							"name": {
								"type": "string",
								"maxLength": 256,
								"description": "The key's name"
							},
							"permissions": {
								"type": "array",
								"items": {
									"type": "string",
									"maxLength": 256
								},
								"description": "The permissions granted to the caller using the key. The permissions in this field are a subset of the owner's permissions. If this field contains permissions that the owner does not have, they are invalid and will not be granted."
							},
							"jwt": {
								"type": "string",
								"description": "The actual key JWT"
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					},
					{
						"$ref": "#/components/schemas/RecordWithOwner"
					}
				]
			},
			"List": {
				"description": "A file list",
				"allOf": [
					{
						"type": "object",
						"required": [
							"name",
							"description",
							"type",
							"visibility",
							"sourceTags",
							"sourceExcludeTags",
							"sourceCreatedBefore",
							"sourceCreatedAfter",
							"showAllUserFiles",
							"sourceMime",
							"itemCount",
							"containsFile"
						],
						"properties": {
							"name": {
								"type": "string",
								"maxLength": 256,
								"description": "The list name"
							},
							"description": {
								"type": "string",
								"maxLength": 1024,
								"description": "The list description"
							},
							"type": {
								"type": "string",
								"enum": [
									"STANDARD",
									"AUTOMATICALLY_POPULATED"
								],
								"description": "The list type"
							},
							"visibility": {
								"type": "string",
								"enum": [
									"PRIVATE",
									"PUBLIC"
								],
								"description": "The list visibility"
							},
							"sourceTags": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"nullable": true,
								"description": "The tags that files must have to be in this list. Only applies to lists with type AUTOMATICALLY_POPULATED, will be null for other types."
							},
							"sourceExcludeTags": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"nullable": true,
								"description": "The tags that files must NOT have to be in this list. Only applies to lists with type AUTOMATICALLY_POPULATED, will be null for other types."
							},
							"sourceMime": {
								"type": "string",
								"maxLength": 129,
								"nullable": true,
								"description": "The MIME type files must have to be in this list. Only applies to lists with type AUTOMATICALLY_POPULATED, will be null for other types."
							},
							"sourceCreatedBefore": {
								"type": "string",
								"format": "date-time",
								"nullable": true,
								"description": "The time files must have been uploaded before to be in this list. Only applies to lists with type AUTOMATICALLY_POPULATED, will be null for other types."
							},
							"sourceCreatedAfter": {
								"type": "string",
								"format": "date-time",
								"nullable": true,
								"description": "The time files must have been uploaded after to be in this list. Only applies to lists with type AUTOMATICALLY_POPULATED, will be null for other types."
							},
							"showAllAccountFiles": {
								"type": "boolean",
								"nullable": true,
								"description": "Whether files by all accounts should be shown in list, not just by the list owner. Only applies to lists with type AUTOMATICALLY_POPULATED, will be null for other types."
							},
							"itemCount": {
								"type": "integer",
								"format": "int32",
								"nullable": true,
								"description": "The number of items in the list. Only applies to lists with type STANDARD, otherwise it will be null."
							},
							"containsFile": {
								"type": "boolean",
								"nullable": true,
								"description": "Whether this list contains the file that was specified in the request. Will be null if none was specified."
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					},
					{
						"$ref": "#/components/schemas/RecordWithNullableOwner"
					}
				]
			},
			"ProcessPreset": {
				"description": "A file process preset",
				"allOf": [
					{
						"type": "object",
						"required": [
							"name",
							"mime",
							"settings"
						],
						"properties": {
							"name": {
								"type": "string",
								"maxLength": 256,
								"description": "The process preset name"
							},
							"mime": {
								"type": "string",
								"maxLength": 129,
								"description": "The MIME type (supports asterisk wildcards) that the process preset applies to"
							},
							"settings": {
								"type": "object",
								"description": "The process preset's settings"
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					},
					{
						"$ref": "#/components/schemas/RecordWithOwner"
					}
				]
			},
			"Source": {
				"description": "A file source",
				"allOf": [
					{
						"type": "object",
						"required": [
							"type",
							"name",
							"isGlobal",
							"config",
							"fileCount"
						],
						"properties": {
							"type": {
								"type": "string",
								"maxLength": 256,
								"description": "The file source's owner. Will be null if the account no longer exists."
							},
							"name": {
								"type": "string",
								"maxLength": 256,
								"description": "The file source's name"
							},
							"isGlobal": {
								"type": "boolean",
								"description": "Whether the file source is available to be used by all accounts"
							},
							"config": {
								"type": "object",
								"nullable": true,
								"description": "The file source's config. Will be null if it was not included in the response."
							},
							"fileCount": {
								"type": "integer",
								"format": "int32",
								"description": "The number of files associated with the file source"
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					},
					{
						"$ref": "#/components/schemas/RecordWithNullableOwner"
					}
				]
			},
			"Tag": {
				"description": "A file tag",
				"allOf": [
					{
						"type": "object",
						"required": [
							"name",
							"description",
							"fileCount"
						],
						"properties": {
							"name": {
								"type": "string",
								"description": "The tag name",
								"maxLength": 256
							},
							"description": {
								"type": "string",
								"description": "The tag description",
								"maxLength": 1024
							},
							"fileCount": {
								"type": "integer",
								"format": "int32",
								"minimum": 0,
								"description": "The number of files the tag is used by"
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					},
					{
						"$ref": "#/components/schemas/RecordWithNullableOwner"
					}
				]
			},
			"File": {
				"description": "A file record",
				"allOf": [
					{
						"type": "object",
						"required": [
							"title",
							"name",
							"description",
							"size",
							"mime",
							"meta",
							"hash",
							"hasThumbnail",
							"tagCount",
							"tags",
							"parent",
							"childCount",
							"children",
							"isProcessing",
							"processError",
							"source"
						],
						"properties": {
							"title": {
								"type": "string",
								"maxLength": 256,
								"description": "The file's title. \"title\" is normal plain text, as opposed to \"name\", which is a filesystem name."
							},
							"name": {
								"type": "string",
								"maxLength": 256,
								"description": "The file's name. \"name\" is a filesystem name, as opposed to \"title\" which is normal plain text."
							},
							"description": {
								"type": "string",
								"maxLength": 1024,
								"description": "The file's description. May be empty."
							},
							"size": {
								"type": "integer",
								"format": "int64",
								"description": "The file's size in bytes"
							},
							"mime": {
								"type": "string",
								"format": "mime",
								"maxLength": 129,
								"description": "The file's MIME type"
							},
							"meta": {
								"type": "object",
								"nullable": true,
								"description": "Any additional metadata available for the file (such as video/audio bitrate, resolution, etc.) in JSON format. Will be null if it was not included in the response."
							},
							"hash": {
								"type": "string",
								"format": "hex",
								"description": "The file hash in hexadecimal format. The hashing algorithm used may vary."
							},
							"hasThumbnail": {
								"type": "boolean",
								"description": "Whether the file has a thumbnail"
							},
							"tagCount": {
								"type": "integer",
								"format": "int32",
								"minimum": 0,
								"description": "The number of tags the file has"
							},
							"tags": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Tag"
								},
								"nullable": true,
								"description": "The file's tags. Will be null if they were not included in the response."
							},
							"parent": {
								"type": "object",
								"allOf": [
									{
										"$ref": "#/components/schemas/File"
									}
								],
								"nullable": false,
								"description": "The file's parent file. Will be null if this file has no parent, or it was not included in the response."
							},
							"childCount": {
								"type": "integer",
								"format": "int32",
								"minimum": 0,
								"description": "The number of children the file has"
							},
							"children": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/File"
								},
								"nullable": true,
								"description": "The file's children. Will be null if they were not included in the response."
							},
							"isProcessing": {
								"type": "boolean",
								"description": "Whether the file is currently processing"
							},
							"processError": {
								"type": "string",
								"nullable": true,
								"description": "The error that caused the file's processing to fail. Will be null if no error has occurred."
							},
							"source": {
								"type": "object",
								"allOf": [
									{
										"$ref": "#/components/schemas/RecordSource"
									}
								],
								"description": "The file's source"
							}
						}
					},
					{
						"$ref": "#/components/schemas/StandardRecord"
					},
					{
						"$ref": "#/components/schemas/RecordWithNullableOwner"
					}
				]
			}
		}
	}
}